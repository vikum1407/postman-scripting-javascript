{
	"info": {
		"_postman_id": "f457194c-b544-41cc-bf94-a0f4ec1efff9",
		"name": "Grafana-Promethus-Automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5157029",
		"_collection_link": "https://vikums.postman.co/workspace/My-Workspace~e171dfc3-5dee-4c5c-8cad-b0e9479fe1e6/collection/5157029-f457194c-b544-41cc-bf94-a0f4ec1efff9?action=share&creator=5157029&source=collection_link"
	},
	"item": [
		{
			"name": "Gateway JVM Dashboard",
			"item": [
				{
					"name": "Gateway - JVM Load Classes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Gateway JVM Dashboard Automation\r",
									" * @author VikumSugathadasa on 10-05-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"\r",
									"\r",
									"pm.test(\"Validate prometheus sends data to the JVM load Classes graph in Gateway JVM Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        //pm.expect(responseJSON.data.result.length).to.be.above(0); // If Fail the test\r",
									"        throw new Error(\"The result array is empty\");\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate JVM load Classes graph's data in Gateway JVM Dashboard\", function () {\r",
									"\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThan(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(jvm_classes_loaded_total{job=~\".*\"})",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(jvm_classes_loaded_total{job=~\".*\"})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Gateway - JVM CPU Usage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Gateway JVM Dashboard Automation\r",
									" * @author VikumSugathadasa on 10-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate prometheus send the data to the JVM CPU Usage graph in Gateway JVM Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"  \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate JVM CPU Usage graph's data in Gateway JVM Dashboard\", function () {\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThan(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(process_cpu_seconds_total{job=~\".*\"})",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(process_cpu_seconds_total{job=~\".*\"})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Gateway - JVM Heap Memory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Gateway JVM Dashboard Automation\r",
									" * @author VikumSugathadasa on 10-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate prometheus send the data to the JVM Heap Memory graph in Gateway JVM Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate JVM Heap Memory graph's data in Gateway JVM Dashboard\", function () {\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThan(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(jvm_memory_bytes_max{area=\"heap\", job=~\".*\"})",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(jvm_memory_bytes_max{area=\"heap\", job=~\".*\"})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Gateway - JVM Live Thread",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Gateway JVM Dashboard Automation\r",
									" * @author VikumSugathadasa on 10-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate prometheus send the data to the JVM Live Thread graph in Gateway JVM Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate JVM Live Thread graph's data in Gateway JVM Dashboard\", function () {\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThan(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(jvm_threads_daemon{job=~\".*\"})",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(jvm_threads_daemon{job=~\".*\"})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Gateway - JVM Gateway None Heap",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Gateway JVM Dashboard Automation\r",
									" * @author VikumSugathadasa on 10-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate prometheus send the data to the JVM None Heap graph in Gateway JVM Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate JVM None Heap graph's data in Gateway JVM Dashboard\", function () {\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"        console.log(\"The value is: \" + secondValue);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThan(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(jvm_memory_bytes_max{area=\"nonheap\", job=~\"gateway-jvm\"})",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(jvm_memory_bytes_max{area=\"nonheap\", job=~\"gateway-jvm\"})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Gateway - JVM Thread By State",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Gateway JVM Dashboard Automation\r",
									" * @author VikumSugathadasa on 10-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate prometheus send the data to the JVM Thread By State graph in Gateway JVM Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate JVM Thread by State graph's data in Gateway JVM Dashboard\", function () {\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThan(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum by (job)(jvm_threads_current{job=~\".*\"})",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum by (job)(jvm_threads_current{job=~\".*\"})"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gateway Traffic Dashboard",
			"item": [
				{
					"name": "Gateway-Traffic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Gateway Traffic Dashboard Automation\r",
									" * @author VikumSugathadasa on 11-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Gateway Traffic Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Traffic of the gateway\", function () {\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(rate(axp_gw_request_total{application_name=~\".*\", api_name=~\".*\", job=\"kubernetes-pods\",api_version=~\".*\"}[60s]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(rate(axp_gw_request_total{application_name=~\".*\", api_name=~\".*\", job=\"kubernetes-pods\",api_version=~\".*\"}[60s]))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Gateway-Traffic By API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Gateway Traffic Dashboard Automation\r",
									" * @author VikumSugathadasa on 11-05-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Gateway Traffic Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Gateway Traffic Dashboard data with Location API\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (resultArray.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"            // Find the object with api_name === 'location'\r",
									"            var locationApiResult = resultArray.find(function(item) {\r",
									"            return item.metric.api_name === 'location';\r",
									"        });\r",
									"        if (locationApiResult) {\r",
									"            var secondValue = parseFloat(locationApiResult.value[1]);\r",
									"\r",
									"            if (secondValue >= 0) {\r",
									"                console.log('The second value of \"location\" is ' + secondValue);\r",
									"            } else {\r",
									"                console.log('The second value of \"location\" is less than 0.');\r",
									"            }\r",
									"        } else {\r",
									"            console.log('No \"location\" data found.');\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate Gateway Traffic Dashboard data with Payment API\", function () {\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (resultArray.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"            // Find the object with api_name === 'payment'\r",
									"            var paymentApiResult = resultArray.find(function(item) {\r",
									"            return item.metric.api_name === 'payment';\r",
									"        });\r",
									"        if (paymentApiResult) {\r",
									"            var secondValue = parseFloat(paymentApiResult.value[1]);\r",
									"\r",
									"            if (secondValue >= 0) {\r",
									"                console.log('The second value of \"payment\" is ' + secondValue);\r",
									"            } else {\r",
									"                console.log('The second value of \"payment\" is less than 0.');\r",
									"            }\r",
									"        } else {\r",
									"            console.log('No \"payment\" data found.');\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Gateway Traffic Dashboard data with SMS API\", function () {\r",
									"  \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (resultArray.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"            // Find the object with api_name === 'smsmessaging'\r",
									"            var smsApiResult = resultArray.find(function(item) {\r",
									"            return item.metric.api_name === 'smsmessaging';\r",
									"        });\r",
									"        if (smsApiResult) {\r",
									"            var secondValue = parseFloat(smsApiResult.value[1]);\r",
									"\r",
									"            if (secondValue >= 0) {\r",
									"                console.log('The second value of \"smsmessaging\" is ' + secondValue);\r",
									"            } else {\r",
									"                console.log('The second value of \"smsmessaging\" is less than 0.');\r",
									"            }\r",
									"        } else {\r",
									"            console.log('No \"smsmessaging\" data found.');\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Gateway Traffic Dashboard data with USSD API\", function () {\r",
									"  \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (resultArray.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"            // Find the object with api_name === 'ussd'\r",
									"            var ussdApiResult = resultArray.find(function(item) {\r",
									"            return item.metric.api_name === 'ussd';\r",
									"        });\r",
									"        if (ussdApiResult) {\r",
									"            var secondValue = parseFloat(ussdApiResult.value[1]);\r",
									"\r",
									"            if (secondValue >= 0) {\r",
									"                console.log('The second value of \"ussd\" is ' + secondValue);\r",
									"            } else {\r",
									"                console.log('The second value of \"ussd\" is less than 0.');\r",
									"            }\r",
									"        } else {\r",
									"            console.log('No \"ussd\" data found.');\r",
									"        }\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum by (api_name) (rate(axp_gw_request_total{application_name=~\".*\", api_name=~\".*\", job=\"kubernetes-pods\",api_version=~\".*\"}[60s]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum by (api_name) (rate(axp_gw_request_total{application_name=~\".*\", api_name=~\".*\", job=\"kubernetes-pods\",api_version=~\".*\"}[60s]))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Gateway-Traffic By Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Gateway Traffic Dashboard Automation\r",
									" * @author VikumSugathadasa on 11-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Gateway Traffic Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Traffic of the gateway by Application\", function () {\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum by (application_name) (rate(axp_gw_request_total{application_name=~\".*\", api_name=~\".*\", job=\"kubernetes-pods\",api_version=~\".*\"}[60s]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum by (application_name) (rate(axp_gw_request_total{application_name=~\".*\", api_name=~\".*\", job=\"kubernetes-pods\",api_version=~\".*\"}[60s]))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Gateway-Traffic Error Trafffic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Gateway Traffic Dashboard Automation\r",
									" * @author VikumSugathadasa on 11-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Gateway Traffic Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Error Traffic of the gateway\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum (rate(axp_gw_failed_total{application_name=~\".*\", api_name=~\".*\", job=\"kubernetes-pods\",api_version=~\".*\"}[60s]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum (rate(axp_gw_failed_total{application_name=~\".*\", api_name=~\".*\", job=\"kubernetes-pods\",api_version=~\".*\"}[60s]))"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gateway Error Traffic Dashboard",
			"item": [
				{
					"name": "Gateway-Error Traffic Total",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Gateway Error Traffic Dashboard Automation\r",
									" * @author VikumSugathadasa on 10-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Gateway Error Traffic Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Error Traffic of the gateway\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(increase(axp_gw_failed_total{api_name=~\".*\",job=\"kubernetes-pods\",status_code=~\".*\"}[60s]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(increase(axp_gw_failed_total{api_name=~\".*\",job=\"kubernetes-pods\",status_code=~\".*\"}[60s]))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Gateway-Error Traffic By API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Gateway Error Traffic Dashboard Automation\r",
									" * @author VikumSugathadasa on 10-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Gateway Error Traffic Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Error Traffic By API\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum by(api_name) (increase(axp_gw_failed_total{api_name=~\".*\",job=\"kubernetes-pods\",status_code=~\".*\"}[60s]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum by(api_name) (increase(axp_gw_failed_total{api_name=~\".*\",job=\"kubernetes-pods\",status_code=~\".*\"}[60s]))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Gateway-Error Traffic By Error msg",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Gateway Error Traffic Dashboard Automation\r",
									" * @author VikumSugathadasa on 10-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Gateway Error Traffic Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Error Traffic By Error message\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query= sum by(error_message) (increase(axp_gw_failed_total{api_name=~\".*\",job=\"kubernetes-pods\",status_code=~\".*\"}[60s]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": " sum by(error_message) (increase(axp_gw_failed_total{api_name=~\".*\",job=\"kubernetes-pods\",status_code=~\".*\"}[60s]))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Gateway-Error Traffic By Status Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Gateway Error Traffic Dashboard Automation\r",
									" * @author VikumSugathadasa on 10-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Gateway Error Traffic Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Error Traffic By Status Code\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum by(status_code) (increase(axp_gw_failed_total{api_name=~\".*\",job=\"kubernetes-pods\",status_code=~\".*\"}[60s]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum by(status_code) (increase(axp_gw_failed_total{api_name=~\".*\",job=\"kubernetes-pods\",status_code=~\".*\"}[60s]))"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gateway Latency Dashboard",
			"item": [
				{
					"name": "Gateway Latency - Gateway Latency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Gateway Latency Dashboard Automation\r",
									" * @author VikumSugathadasa on 13-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Gateway Latency Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Gateway Latency dashboard data for Gateway Latency graph\", function () {\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float or check if it is \"NaN\"\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        if (valueArray[1] === \"NaN\" || secondValue === 0) {\r",
									"            console.log(\"secondValue is either 0 or NaN\");\r",
									"            //throw new Error(\"secondValue is either 0 or NaN\");\r",
									"        } else if (secondValue <= -1) {\r",
									"            console.log(\"secondValue is -1\");\r",
									"            throw new Error(\"secondValue is (-) value\");\r",
									"        } else {\r",
									"            console.log(\"The value is: \" + secondValue);\r",
									"        }\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0 or NaN\r",
									"        pm.expect(secondValue, \"The second value should be greater than or equal to 0 or NaN\").to.satisfy(function (value) {\r",
									"            return value >= 0 || isNaN(value);\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=max(increase(axp_gw_latency_sum{ api_name=~\".*\",application_name=~\".*\"}[60s])/increase(axp_gw_latency_count{ api_name=~\".*\",application_name=~\".*\"}[60s]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "max(increase(axp_gw_latency_sum{ api_name=~\".*\",application_name=~\".*\"}[60s])/increase(axp_gw_latency_count{ api_name=~\".*\",application_name=~\".*\"}[60s]))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Gateway Latency - Gateway Latency By Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Gateway Latency Dashboard Automation\r",
									" * @author VikumSugathadasa on 13-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Gateway Latency Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Gateway Latency Dashboard data with all Apps\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum by (application_name) ( axp_gw_latency_sum{ application_name=~\".*\",api_name=~\".*\"})/ sum by (application_name) (axp_gw_latency_count{ application_name=~\".*\",api_name=~\".*\"})",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum by (application_name) ( axp_gw_latency_sum{ application_name=~\".*\",api_name=~\".*\"})/ sum by (application_name) (axp_gw_latency_count{ application_name=~\".*\",api_name=~\".*\"})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Gateway Latency - Gateway Latency By API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Gateway Latency Dashboard Automation\r",
									" * @author VikumSugathadasa on 13-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Gateway Latency Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Gateway Latency dashboard data for Success Latency By API graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=max by(api_name) (increase(axp_gw_latency_sum{ api_name=~\".*\",application_name=~\".*\"}[60s])/increase(axp_gw_latency_count{ api_name=~\".*\",application_name=~\".*\"}[60s]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "max by(api_name) (increase(axp_gw_latency_sum{ api_name=~\".*\",application_name=~\".*\"}[60s])/increase(axp_gw_latency_count{ api_name=~\".*\",application_name=~\".*\"}[60s]))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Gateway Latency - Gateway Latency By Status Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Gateway Latency Dashboard Automation\r",
									" * @author VikumSugathadasa on 13-05-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Gateway Latency Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Gateway Latency Dashboard data with all Status code graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float or check if it is \"NaN\"\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        if (valueArray[1] === \"NaN\" || secondValue === 0) {\r",
									"            console.log(\"secondValue is either 0 or NaN\");\r",
									"            //throw new Error(\"secondValue is either 0 or NaN\");\r",
									"        } else if (secondValue <= -1) {\r",
									"            console.log(\"secondValue is -1\");\r",
									"            throw new Error(\"secondValue is - value\");\r",
									"        } else {\r",
									"            console.log(\"The value is: \" + secondValue);\r",
									"        }\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0 or NaN\r",
									"        pm.expect(secondValue, \"The second value should be greater than or equal to 0 or NaN\").to.satisfy(function (value) {\r",
									"            return value >= 0 || isNaN(value);\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Latency with the 200 status code in Gateway Latency Dashboard\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {  \r",
									"        // Find the 200 status code\r",
									"        var status200Result = resultArray.find(function (result) {\r",
									"            return result.metric.status_code === \"200\";\r",
									"        });\r",
									"\r",
									"        if(typeof status200Result === undefined){\r",
									"            console.log(\"The 200 status code is not found in the response\")\r",
									"        }else{\r",
									"            // Extract the value array\r",
									"            var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"            // Extract the second value of the 200 status code\r",
									"            var secondValue = parseFloat(status200Result.value[1]);\r",
									"            console.log(\"'200 status code' value is: \" + secondValue);\r",
									"\r",
									"            if(valueArray[1] === \"NaN\" || secondValue === 0){\r",
									"                console.log(\"secondValue is either 0 or NaN\");\r",
									"            }else if(secondValue <= -1){\r",
									"                console.log(\"secondValue is -1\");\r",
									"                throw new Error(\"secondValue is (-) value\");\r",
									"            }else{\r",
									"                console.log(\"The value is: \" + secondValue);\r",
									"            }\r",
									"        }\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0 or NaN\r",
									"        pm.expect(secondValue, \"The second value should be greater than or equal to 0 or NaN\").to.satisfy(function (value) {\r",
									"            return value >= 0 || isNaN(value);\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Latency with the 201 status code in Gateway Latency Dashboard\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {  \r",
									"        // Find the 201 status code\r",
									"        var status201Result = resultArray.find(function (result) {\r",
									"            return result.metric.status_code === \"201\";\r",
									"        });\r",
									"\r",
									"        if(typeof status201Result === undefined){\r",
									"            console.log(\"The 201 status code is not found in the response\")\r",
									"        }else{\r",
									"            // Extract the value array\r",
									"            var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"            // Extract the second value of the 201 status code\r",
									"            var secondValue = parseFloat(status201Result.value[1]);\r",
									"            console.log(\"'201 status code' value is: \" + secondValue);\r",
									"\r",
									"            if(valueArray[1] === \"NaN\" || secondValue === 0){\r",
									"                console.log(\"secondValue is either 0 or NaN\");\r",
									"            }else if(secondValue <= -1){\r",
									"                console.log(\"secondValue is -1\");\r",
									"                throw new Error(\"secondValue is (-) value\");\r",
									"            }else{\r",
									"                console.log(\"The value is: \" + secondValue);\r",
									"            }\r",
									"        }\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0 or NaN\r",
									"        pm.expect(secondValue, \"The second value should be greater than or equal to 0 or NaN\").to.satisfy(function (value) {\r",
									"            return value >= 0 || isNaN(value);\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Latency with the 400 status code in Gateway Latency Dashboard\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {  \r",
									"        // Find the 400 status code\r",
									"        var status400Result = resultArray.find(function (result) {\r",
									"            return result.metric.status_code === \"400\";\r",
									"        });\r",
									"\r",
									"        // Check if the object with status code 400 does not exist\r",
									"        if (!status400Result) {\r",
									"            pm.expect(true).to.be.true; // Pass the test\r",
									"            return; // Exit the function\r",
									"        }\r",
									"\r",
									"        if(typeof status400Result === undefined){\r",
									"            console.log(\"The 400 status code is not found in the response\")\r",
									"        }else{\r",
									"            // Extract the value array\r",
									"            var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"            // Extract the second value of the 400 status code\r",
									"            var secondValue = parseFloat(status400Result.value[1]);\r",
									"            console.log(\"'400 status code' value is: \" + secondValue);\r",
									"\r",
									"            if(valueArray[1] === \"NaN\" || secondValue === 0){\r",
									"                console.log(\"secondValue is either 0 or NaN\");\r",
									"            }else if(secondValue <= -1){\r",
									"                console.log(\"secondValue is -1\");\r",
									"                throw new Error(\"secondValue is (-) value\");\r",
									"            }else{\r",
									"                console.log(\"The value is: \" + secondValue);\r",
									"            }\r",
									"        }\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0 or NaN\r",
									"        pm.expect(secondValue, \"The second value should be greater than or equal to 0 or NaN\").to.satisfy(function (value) {\r",
									"            return value >= 0 || isNaN(value);\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Latency with the 403 status code in Gateway Latency Dashboard\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {  \r",
									"        // Find the 403 status code\r",
									"        var status403Result = resultArray.find(function (result) {\r",
									"            return result.metric.status_code === \"403\";\r",
									"        });\r",
									"\r",
									"        // Check if the object with status code 403 does not exist\r",
									"        if (!status403Result) {\r",
									"            pm.expect(true).to.be.true; // Pass the test\r",
									"            return; // Exit the function\r",
									"        }\r",
									"\r",
									"        if(typeof status403Result === undefined){\r",
									"            console.log(\"The 403 status code is not found in the response\")\r",
									"        }else{\r",
									"            // Extract the value array\r",
									"            var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"            // Extract the second value of the 400 status code\r",
									"            var secondValue = parseFloat(status403Result.value[1]);\r",
									"\r",
									"            if(valueArray[1] === \"NaN\" || secondValue === 0){\r",
									"                console.log(\"secondValue is either 0 or NaN\");\r",
									"            }else if(secondValue <= -1){\r",
									"                console.log(\"secondValue is -1\");\r",
									"                throw new Error(\"secondValue is (-) value\");\r",
									"            }else{\r",
									"                console.log(\"The value is: \" + secondValue);\r",
									"            }\r",
									"        }\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0 or NaN\r",
									"        pm.expect(secondValue, \"The second value should be greater than or equal to 0 or NaN\").to.satisfy(function (value) {\r",
									"            return value >= 0 || isNaN(value);\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Latency with the 404 status code in Gateway Latency Dashboard\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {  \r",
									"        // Find the 404 status code\r",
									"        var status404Result = resultArray.find(function (result) {\r",
									"            return result.metric.status_code === \"404\";\r",
									"        });\r",
									"\r",
									"        // Check if the object with status code 404 does not exist\r",
									"        if (!status404Result) {\r",
									"            pm.expect(true).to.be.true; // Pass the test\r",
									"            return; // Exit the function\r",
									"        }\r",
									"\r",
									"        if(typeof status404Result === undefined){\r",
									"            console.log(\"The 404 status code is not found in the response\")\r",
									"        }else{\r",
									"            // Extract the value array\r",
									"            var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"            // Extract the second value of the 404 status code\r",
									"            var secondValue = parseFloat(status404Result.value[1]);\r",
									"            console.log(\"'404 status code' value is: \" + secondValue);\r",
									"\r",
									"            if(valueArray[1] === \"NaN\" || secondValue === 0){\r",
									"                console.log(\"secondValue is either 0 or NaN\");\r",
									"            }else if(secondValue <= -1){\r",
									"                console.log(\"secondValue is -1\");\r",
									"                throw new Error(\"secondValue is (-) value\");\r",
									"            }else{\r",
									"                console.log(\"The value is: \" + secondValue);\r",
									"            }\r",
									"        }\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0 or NaN\r",
									"        pm.expect(secondValue, \"The second value should be greater than or equal to 0 or NaN\").to.satisfy(function (value) {\r",
									"            return value >= 0 || isNaN(value);\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate Latency with the 500 status code in Gateway Latency Dashboard\", function () {\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Find the 500 status code\r",
									"        var status500Result = resultArray.find(function (result) {\r",
									"            return result.metric.status_code === \"500\";\r",
									"        });\r",
									"\r",
									"        // Check if the object with status code 500 does not exist\r",
									"        if (!status500Result) {\r",
									"            pm.expect(true).to.be.true; // Pass the test\r",
									"            return; // Exit the function\r",
									"        }\r",
									"\r",
									"        if (typeof status500Result === \"undefined\") {\r",
									"            console.log(\"The 500 status code is not found in the response\");\r",
									"        } else {\r",
									"            // Extract the value array\r",
									"            var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"            // Extract the second value of the 500 status code\r",
									"            var secondValue = parseFloat(status500Result.value[1]);\r",
									"            if (valueArray[1] === \"NaN\" || secondValue === 0) {\r",
									"                console.log(\"secondValue is either 0 or NaN\");\r",
									"            } else if (secondValue <= -1) {\r",
									"                console.log(\"secondValue is -1\");\r",
									"                throw new Error(\"secondValue is (-) value\");\r",
									"            } else {\r",
									"                console.log(\"The value is: \" + secondValue);\r",
									"            }\r",
									"\r",
									"            // Check if the second value is greater than or equal to 0 or NaN\r",
									"            pm.expect(secondValue, \"The second value should be greater than or equal to 0 or NaN\").to.satisfy(function (value) {\r",
									"                return value >= 0 || isNaN(value);\r",
									"            });\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Latency with the 502 status code in Gateway Latency Dashboard\", function () {\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Find the 502 status code\r",
									"        var status502Result = resultArray.find(function (result) {\r",
									"            return result.metric.status_code === \"502\";\r",
									"        });\r",
									"\r",
									"        // Check if the object with status code 502 does not exist\r",
									"        if (!status502Result) {\r",
									"            pm.expect(true).to.be.true; // Pass the test\r",
									"            return; // Exit the function\r",
									"        }\r",
									"\r",
									"        if (typeof status502Result === \"undefined\") {\r",
									"            console.log(\"The 502 status code is not found in the response\");\r",
									"        } else {\r",
									"            // Extract the value array\r",
									"            var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"            // Extract the second value of the 502 status code\r",
									"            var secondValue = parseFloat(status502Result.value[1]);\r",
									"            if (valueArray[1] === \"NaN\" || secondValue === 0) {\r",
									"                console.log(\"secondValue is either 0 or NaN\");\r",
									"            } else if (secondValue <= -1) {\r",
									"                console.log(\"secondValue is -1\");\r",
									"                throw new Error(\"secondValue is (-) value\");\r",
									"            } else {\r",
									"                console.log(\"The value is: \" + secondValue);\r",
									"            }\r",
									"\r",
									"            // Check if the second value is greater than or equal to 0 or NaN\r",
									"            pm.expect(secondValue, \"The second value should be greater than or equal to 0 or NaN\").to.satisfy(function (value) {\r",
									"                return value >= 0 || isNaN(value);\r",
									"            });\r",
									"        }\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=max by(status_code) (increase(axp_gw_latency_sum{ api_name=~\".*\",application_name=~\".*\"}[60s])/increase(axp_gw_latency_count{ api_name=~\".*\",application_name=~\".*\"}[60s]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "max by(status_code) (increase(axp_gw_latency_sum{ api_name=~\".*\",application_name=~\".*\"}[60s])/increase(axp_gw_latency_count{ api_name=~\".*\",application_name=~\".*\"}[60s]))"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "System Pod Dashboard",
			"item": [
				{
					"name": "System - Pod CPU",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * System Pod Dashboard Automation\r",
									" * @author VikumSugathadasa on 13-05-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the System Pod Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Pod CPU graph in System Pod Dashboard\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Gateway Pod CPU Utilization\", function () {\r",
									"\r",
									"    // Find the desired pod based on a label or partial name match\r",
									"    var targetPod = resultArray.find(function (result) {\r",
									"        return result.metric.pod.includes(\"gateway\");\r",
									"    });\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        if (targetPod) {\r",
									"            // Extract the second value of the matching pod\r",
									"            var secondValue = parseFloat(targetPod.value[1]);\r",
									"\r",
									"            // Check if the second value is greater than or equal to 0\r",
									"            pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the matched pod should be greater than or equal to 0\");\r",
									"        } else {\r",
									"            // If no matching pod is found, fail the test or provide a suitable message\r",
									"            pm.test.fail(\"No matching pod found\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Portal Pod CPU Utilization\", function () {\r",
									"\r",
									"    // Find the desired pod based on a label or partial name match\r",
									"    var targetPod = resultArray.find(function (result) {\r",
									"        return result.metric.pod.includes(\"cp\");\r",
									"    });\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        if (targetPod) {\r",
									"            // Extract the second value of the matching pod\r",
									"            var secondValue = parseFloat(targetPod.value[1]);\r",
									"\r",
									"            // Check if the second value is greater than or equal to 0\r",
									"            pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the matched pod should be greater than or equal to 0\");\r",
									"        } else {\r",
									"            // If no matching pod is found, fail the test or provide a suitable message\r",
									"            pm.test.fail(\"No matching pod found\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Traffic Manager Pod CPU Utilization\", function () {\r",
									"\r",
									"    // Find the desired pod based on a label or partial name match\r",
									"    var targetPod = resultArray.find(function (result) {\r",
									"        return result.metric.pod.includes(\"trafficmanager\");\r",
									"    });\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        if (targetPod) {\r",
									"            // Extract the second value of the matching pod\r",
									"            var secondValue = parseFloat(targetPod.value[1]);\r",
									"\r",
									"            // Check if the second value is greater than or equal to 0\r",
									"            pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the matched pod should be greater than or equal to 0\");\r",
									"        } else {\r",
									"            // If no matching pod is found, fail the test or provide a suitable message\r",
									"            pm.test.fail(\"No matching pod found\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Traffic Manager Pod CPU Utilization\", function () {\r",
									"\r",
									"    // Find the desired pod based on a label or partial name match\r",
									"    var targetPod = resultArray.find(function (result) {\r",
									"        return result.metric.pod.includes(\"mysql\");\r",
									"    });\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        if (targetPod) {\r",
									"            // Extract the second value of the matching pod\r",
									"            var secondValue = parseFloat(targetPod.value[1]);\r",
									"\r",
									"            // Check if the second value is greater than or equal to 0\r",
									"            pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the matched pod should be greater than or equal to 0\");\r",
									"        } else {\r",
									"            // If no matching pod is found, fail the test or provide a suitable message\r",
									"            pm.test.fail(\"No matching pod found\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Key Manager Pod CPU Utilization\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {  \r",
									"        // Find the pod name\r",
									"        var ussdApiResult = resultArray.find(function (result) {\r",
									"            return result.metric.pod === \"axonect-monetiser-km-statefulset-0\";\r",
									"        });\r",
									"\r",
									"        var secondValue = parseFloat(ussdApiResult.value[1]);\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the ussd API should be greater than or equal to 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum by (pod) (rate(container_cpu_usage_seconds_total{namespace=\"default\", pod=~\".*\"}[1m]))*10",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum by (pod) (rate(container_cpu_usage_seconds_total{namespace=\"default\", pod=~\".*\"}[1m]))*10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "System - Pod Memory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * System Pod Dashboard Automation\r",
									" * @author VikumSugathadasa on 13-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the System Pod Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Pod Memory graph in System Pod Dashboard\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Gateway Memory CPU Utilization\", function () {\r",
									"\r",
									"    // Find the desired pod based on a label or partial name match\r",
									"    var targetPod = resultArray.find(function (result) {\r",
									"        return result.metric.pod.includes(\"gateway\");\r",
									"    });\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        if (targetPod) {\r",
									"            // Extract the second value of the matching pod\r",
									"            var secondValue = parseFloat(targetPod.value[1]);\r",
									"\r",
									"            // Check if the second value is greater than or equal to 0\r",
									"            pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the matched pod should be greater than or equal to 0\");\r",
									"        } else {\r",
									"            // If no matching pod is found, fail the test or provide a suitable message\r",
									"            pm.test.fail(\"No matching pod found\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Portal Pod Memory Utilization\", function () {\r",
									"\r",
									"    // Find the desired pod based on a label or partial name match\r",
									"    var targetPod = resultArray.find(function (result) {\r",
									"        return result.metric.pod.includes(\"cp\");\r",
									"    });\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        if (targetPod) {\r",
									"            // Extract the second value of the matching pod\r",
									"            var secondValue = parseFloat(targetPod.value[1]);\r",
									"\r",
									"            // Check if the second value is greater than or equal to 0\r",
									"            pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the matched pod should be greater than or equal to 0\");\r",
									"        } else {\r",
									"            // If no matching pod is found, fail the test or provide a suitable message\r",
									"            pm.test.fail(\"No matching pod found\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Traffic Manager Pod Memory Utilization\", function () {\r",
									"\r",
									"    // Find the desired pod based on a label or partial name match\r",
									"    var targetPod = resultArray.find(function (result) {\r",
									"        return result.metric.pod.includes(\"trafficmanager\");\r",
									"    });\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        if (targetPod) {\r",
									"            // Extract the second value of the matching pod\r",
									"            var secondValue = parseFloat(targetPod.value[1]);\r",
									"\r",
									"            // Check if the second value is greater than or equal to 0\r",
									"            pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the matched pod should be greater than or equal to 0\");\r",
									"        } else {\r",
									"            // If no matching pod is found, fail the test or provide a suitable message\r",
									"            pm.test.fail(\"No matching pod found\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Traffic Manager Pod Memory Utilization\", function () {\r",
									"\r",
									"    // Find the desired pod based on a label or partial name match\r",
									"    var targetPod = resultArray.find(function (result) {\r",
									"        return result.metric.pod.includes(\"mysql\");\r",
									"    });\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        if (targetPod) {\r",
									"            // Extract the second value of the matching pod\r",
									"            var secondValue = parseFloat(targetPod.value[1]);\r",
									"\r",
									"            // Check if the second value is greater than or equal to 0\r",
									"            pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the matched pod should be greater than or equal to 0\");\r",
									"        } else {\r",
									"            // If no matching pod is found, fail the test or provide a suitable message\r",
									"            pm.test.fail(\"No matching pod found\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Key Manager Pod Memory Utilization\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {  \r",
									"        // Find the pod name\r",
									"        var ussdApiResult = resultArray.find(function (result) {\r",
									"            return result.metric.pod === \"axonect-monetiser-km-statefulset-0\";\r",
									"        });\r",
									"\r",
									"        var secondValue = parseFloat(ussdApiResult.value[1]);\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the ussd API should be greater than or equal to 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum by (pod)(container_memory_working_set_bytes{pod=~\".*\", namespace=\"default\"})/100000",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum by (pod)(container_memory_working_set_bytes{pod=~\".*\", namespace=\"default\"})/100000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "System - Pod Network",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * System Pod Dashboard Automation\r",
									" * @author VikumSugathadasa on 13-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the System Pod Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Pod Network graph in System Pod Dashboard\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=rate(container_network_transmit_bytes_total{pod=~\".*\"}[5m])  ",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "rate(container_network_transmit_bytes_total{pod=~\".*\"}[5m])  "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "System - Pod DiskIO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * System Pod Dashboard Automation\r",
									" * @author VikumSugathadasa on 13-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the System Pod Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Pod DiskIO graph in System Pod Dashboard\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(node_disk_io_time_seconds_total)",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(node_disk_io_time_seconds_total)"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Microservice JVM Dashboard",
			"item": [
				{
					"name": "MS - JVM CPU All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice JVM Dashboard Automation\r",
									" * @author VikumSugathadasa on 16-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Microservice JVM Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate CPU Usage for all APIs in Microservice JVM Dashboard\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(process_cpu_usage{job=~\".*\"})",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(process_cpu_usage{job=~\".*\"})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MS - JVM CPU SMS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice JVM Dashboard Automation\r",
									" * @author VikumSugathadasa on 16-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Microservice JVM Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate CPU Usage for SMS API in Microservice JVM Dashboard\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(process_cpu_usage{job=~\"axp-sms\"})",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(process_cpu_usage{job=~\"axp-sms\"})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MS - JVM CPU USSD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice JVM Dashboard Automation\r",
									" * @author VikumSugathadasa on 16-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Microservice JVM Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate CPU Usage for USSD API in Microservice JVM Dashboard\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(process_cpu_usage{job=~\"axp-ussd\"})",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(process_cpu_usage{job=~\"axp-ussd\"})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MS - JVM CPU Location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice JVM Dashboard Automation\r",
									" * @author VikumSugathadasa on 16-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Microservice JVM Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate CPU Usage for Location API in Microservice JVM Dashboard\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(process_cpu_usage{job=~\"axp-location\"})",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(process_cpu_usage{job=~\"axp-location\"})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MS - JVM CPU Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice JVM Dashboard Automation\r",
									" * @author VikumSugathadasa on 16-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Microservice JVM Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate CPU Usage for Payment API in Microservice JVM Dashboard\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(process_cpu_usage{job=~\"axp-payment\"})",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(process_cpu_usage{job=~\"axp-payment\"})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MS - JVM Heap Memory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice JVM Dashboard Automation\r",
									" * @author VikumSugathadasa on 16-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Heap Memory graph in Microservice JVM Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Heap Memory in Microservice JVM Dashboard\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(jvm_memory_bytes_max{area=\"heap\", job=~\".*\"})",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(jvm_memory_bytes_max{area=\"heap\", job=~\".*\"})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MS -JVM HTTP Request Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice JVM Dashboard Automation\r",
									" * @author VikumSugathadasa on 16-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the HTTP Request Count graph in Microservice JVM Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate HTTP Request Count in Microservice JVM Dashboard\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum by (job)(rate(vertx_http_server_request_bytes_count{job=~\".*\"}[60s]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum by (job)(rate(vertx_http_server_request_bytes_count{job=~\".*\"}[60s]))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MS - JVM Live Thread",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice JVM Dashboard Automation\r",
									" * @author VikumSugathadasa on 16-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Live Thread graph in Microservice JVM Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Live Thread in Microservice JVM Dashboard\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(jvm_threads_daemon{job=~\".*\"})",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(jvm_threads_daemon{job=~\".*\"})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MS -JVM Garbage Collection Memory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice JVM Dashboard Automation\r",
									" * @author VikumSugathadasa on 16-05-2023\r",
									" */\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Garbage Collection Memory graph in Microservice JVM Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Garbage Collection Memory in Microservice JVM Dashboard\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(jvm_gc_live_data_size_bytes{job=~\".*\"})",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(jvm_gc_live_data_size_bytes{job=~\".*\"})"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Microservice Traffic Dashboard",
			"item": [
				{
					"name": "MS- Traffic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice Traffic Dashboard Automation\r",
									" * @author VikumSugathadasa on 18-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Microservice Traffic Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Traffic dashboard data\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(rate(success_request_counter_total{api=~\".*\",  operation=~\".*\"}[60s]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(rate(success_request_counter_total{api=~\".*\",  operation=~\".*\"}[60s]))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MS- Traffic By API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice Traffic Dashboard Automation\r",
									" * @author VikumSugathadasa on 18-05-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Microservice Traffic Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Traffic Dashboard data with all OEM APIs\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Traffic Dashboard data with Location API\", function () {\r",
									"  \r",
									"    // Find the \"location\" API result\r",
									"    var locationApiResult = resultArray.find(function (result) {\r",
									"        return result.metric.api === \"location\";\r",
									"    });\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the second value of the \"location\" API result\r",
									"        var secondValue = parseFloat(locationApiResult.value[1]);\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the location API should be greater than or equal to 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Traffic Dashboard data with Payment API\", function () {\r",
									"  \r",
									"    // Find the \"payment\" API result\r",
									"    var paymentApiResult = resultArray.find(function (result) {\r",
									"        return result.metric.api === \"payment\";\r",
									"    });\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the second value of the \"payment\" API result\r",
									"        var secondValue = parseFloat(paymentApiResult.value[1]);\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the payment API should be greater than or equal to 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Traffic Dashboard data with SMS API\", function () {\r",
									"  \r",
									"    // Find the \"smsmessaging\" API result\r",
									"    var smsApiResult = resultArray.find(function (result) {\r",
									"        return result.metric.api === \"smsmessaging\";\r",
									"    });\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the second value of the \"smsmessaging\" API result\r",
									"        var secondValue = parseFloat(smsApiResult.value[1]);\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the smsmessaging API should be greater than or equal to 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Traffic Dashboard data with USSD API\", function () {\r",
									"  \r",
									"    // Find the \"ussd\" API result\r",
									"    var ussdApiResult = resultArray.find(function (result) {\r",
									"        return result.metric.api === \"ussd\";\r",
									"    });\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the second value of the \"ussd\" API result\r",
									"        var secondValue = parseFloat(ussdApiResult.value[1]);\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the ussd API should be greater than or equal to 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum by(api) (rate(success_request_counter_total{api=~\".*\",  operation=~\".*\"}[1m]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum by(api) (rate(success_request_counter_total{api=~\".*\",  operation=~\".*\"}[1m]))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MS- Fail Traffic By Operation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice Traffic Dashboard Automation\r",
									" * @author VikumSugathadasa on 18-05-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Microservice Traffic Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Traffic Dashboard data with all OEM APIs\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Traffic Dashboard data with Location API\", function () {\r",
									"  \r",
									"    // Find the \"location\" API result\r",
									"    var locationOperationResult = resultArray.find(function (result) {\r",
									"        return result.metric.operation === \"Query Location\";\r",
									"    });\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the second value of the \"location\" API result\r",
									"        var secondValue = parseFloat(locationOperationResult.value[1]);\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the location operation should be greater than or equal to 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Traffic Dashboard data with Payment API\", function () {\r",
									"  \r",
									"    // Find the \"payment\" Operation result\r",
									"    var paymentOperationApiResult = resultArray.find(function (result) {\r",
									"        return result.metric.operation === \"Charged\";\r",
									"    });\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the second value of the \"payment\" Operation result\r",
									"        var secondValue = parseFloat(paymentOperationApiResult.value[1]);\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the payment operation should be greater than or equal to 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Traffic Dashboard data with SMS API\", function () {\r",
									"  \r",
									"    // Find the \"smsmessaging\" Operation result\r",
									"    var smsOperationResult = resultArray.find(function (result) {\r",
									"        return result.metric.operation === \"Send_SMS\";\r",
									"    });\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the second value of the \"smsmessaging\" Operation result\r",
									"        var secondValue = parseFloat(smsOperationResult.value[1]);\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the smsmessaging API should be greater than or equal to 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Traffic Dashboard data with USSD Operation\", function () {\r",
									"  \r",
									"    // Find the \"ussd\" Operation result\r",
									"    var ussdOperationResult = resultArray.find(function (result) {\r",
									"        return result.metric.operation === \"MT\";\r",
									"    });\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the second value of the \"ussd\" Operation result\r",
									"        var secondValue = parseFloat(ussdOperationResult.value[1]);\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the ussd operation should be greater than or equal to 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum by( operation ) (rate(success_request_counter_total{api=~\".*\",  operation=~\".*\"}[1m]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum by( operation ) (rate(success_request_counter_total{api=~\".*\",  operation=~\".*\"}[1m]))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MS- Fail Traffic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice Traffic Dashboard Automation\r",
									" * @author VikumSugathadasa on 18-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Microservice Traffic Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Traffic dashboard data\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(rate( failed_request_counter_total {api=~\".*\",  operation=~\".*\"}[1m]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(rate( failed_request_counter_total {api=~\".*\",  operation=~\".*\"}[1m]))"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Microservice Error Dashboard",
			"item": [
				{
					"name": "MS- Total Error Traffic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice Error Dashboard Automation\r",
									" * @author VikumSugathadasa on 22-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Microservice Error Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Total Error Traffic graph data in Microservice Error dashboard\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum by(job) (rate(failed_request_counter_total{api=~\".*\", statusCode=~\".*\"}[1m]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum by(job) (rate(failed_request_counter_total{api=~\".*\", statusCode=~\".*\"}[1m]))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MS- Error Traffic by Job vs Time & Comparison",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice Error Dashboard Automation\r",
									" * @author VikumSugathadasa on 22-05-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Microservice Error Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Error Traffic by Job vs Time Comparison gaphs data in Microservice Error Dashboard\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Error Traffic by Job vs Time Comparison gaphs data with Location API\", function () {\r",
									"  \r",
									"    // Find the \"location\" API result\r",
									"    var locationApiResult = resultArray.find(function (result) {\r",
									"        return result.metric.api === \"location\";\r",
									"    });\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the second value of the \"location\" API result\r",
									"        var secondValue = parseFloat(locationApiResult.value[1]);\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the location API should be greater than or equal to 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Error Traffic by Job vs Time Comparison gaphs data with Payment API\", function () {\r",
									"  \r",
									"    // Find the \"payment\" API result\r",
									"    var paymentApiResult = resultArray.find(function (result) {\r",
									"        return result.metric.api === \"payment\";\r",
									"    });\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the second value of the \"payment\" API result\r",
									"        var secondValue = parseFloat(paymentApiResult.value[1]);\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the payment API should be greater than or equal to 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Error Traffic by Job vs Time Comparison gaphs data with SMS API\", function () {\r",
									"  \r",
									"    // Find the \"smsmessaging\" API result\r",
									"    var smsApiResult = resultArray.find(function (result) {\r",
									"        return result.metric.api === \"smsmessaging\";\r",
									"    });\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the second value of the \"smsmessaging\" API result\r",
									"        var secondValue = parseFloat(smsApiResult.value[1]);\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the smsmessaging API should be greater than or equal to 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Error Traffic by Job vs Time Comparison gaphs data with USSD API\", function () {\r",
									"  \r",
									"    // Find the \"ussd\" API result\r",
									"    var ussdApiResult = resultArray.find(function (result) {\r",
									"        return result.metric.api === \"ussd\";\r",
									"    });\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the second value of the \"ussd\" API result\r",
									"        var secondValue = parseFloat(ussdApiResult.value[1]);\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the ussd API should be greater than or equal to 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum by(api) (rate(success_request_counter_total{api=~\".*\",  operation=~\".*\"}[1m]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum by(api) (rate(success_request_counter_total{api=~\".*\",  operation=~\".*\"}[1m]))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MS- Error Traffic by HTTP Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice Error Dashboard Automation\r",
									" * @author VikumSugathadasa on 22-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Microservice Error Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Error Traffic by HTTP Code graph in Microservice Error dashboard\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum by (statusCode) (rate(failed_request_counter_total{api=~\".*\", statusCode=~\".*\"}[1m]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum by (statusCode) (rate(failed_request_counter_total{api=~\".*\", statusCode=~\".*\"}[1m]))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MS- Error Traffic by API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice Error Dashboard Automation\r",
									" * @author VikumSugathadasa on 22-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Microservice Error Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Error Traffic by API graph in Microservice Error dashboard\", function () {\r",
									"\r",
									"     if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum by(api) (rate(failed_request_counter_total{statusCode=~\".*\", api=~\".*\"}[1m]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum by(api) (rate(failed_request_counter_total{statusCode=~\".*\", api=~\".*\"}[1m]))"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Microservice Latency Dashboard",
			"item": [
				{
					"name": "MS Latency - Success Request Latency By API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice Latency Dashboard Automation\r",
									" * @author VikumSugathadasa on 24-05-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Microservice Latency Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate Microservice Latency dashboard data for Success Request Latency By API graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum by (api)(rate(request_time_summary_sum{api=~\".*\", operation=~\".*\"}[60s] ))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum by (api)(rate(request_time_summary_sum{api=~\".*\", operation=~\".*\"}[60s] ))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MS Latency - Success Backend Latency By API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice Latency Dashboard Automation\r",
									" * @author VikumSugathadasa on 24-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Microservice Latency Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Latency Dashboard data with all OEM APIs for Success Backend Latency By API graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Traffic Dashboard data with Location API\", function () {\r",
									"  \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Find the \"location\" API result\r",
									"        var locationApiResult = resultArray.find(function (result) {\r",
									"            return result.metric.api === \"location\";\r",
									"        });\r",
									"\r",
									"        // Extract the second value of the \"location\" API result\r",
									"        var secondValue = parseFloat(locationApiResult.value[1]);\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the location API should be greater than or equal to 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Traffic Dashboard data with Payment API\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {  \r",
									"        // Find the \"payment\" API result\r",
									"        var paymentApiResult = resultArray.find(function (result) {\r",
									"            return result.metric.api === \"payment\";\r",
									"        });\r",
									"\r",
									"        // Extract the second value of the \"payment\" API result\r",
									"        var secondValue = parseFloat(paymentApiResult.value[1]);\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the payment API should be greater than or equal to 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Traffic Dashboard data with SMS API\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {  \r",
									"        // Find the \"smsmessaging\" API result\r",
									"        var smsApiResult = resultArray.find(function (result) {\r",
									"            return result.metric.api === \"smsmessaging\";\r",
									"        });\r",
									"\r",
									"        // Extract the second value of the \"smsmessaging\" API result\r",
									"        var secondValue = parseFloat(smsApiResult.value[1]);\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the smsmessaging API should be greater than or equal to 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Traffic Dashboard data with USSD API\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {  \r",
									"        // Find the \"ussd\" API result\r",
									"        var ussdApiResult = resultArray.find(function (result) {\r",
									"            return result.metric.api === \"ussd\";\r",
									"        });\r",
									"\r",
									"        // Extract the second value of the \"ussd\" API result\r",
									"        var secondValue = parseFloat(ussdApiResult.value[1]);\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the ussd API should be greater than or equal to 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum by (api)(rate(backend_time_summary_sum{api=~\".*\", operation=~\".*\"}[60s] ))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum by (api)(rate(backend_time_summary_sum{api=~\".*\", operation=~\".*\"}[60s] ))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MS Latency - Success Total Latency By API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice Latency Dashboard Automation\r",
									" * @author VikumSugathadasa on 24-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Microservice Latency Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Latency dashboard data for Success Total Latency By API graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum by (api)(rate(backend_time_summary_sum{api=~\".*\", operation=~\".*\"}[60s] ))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum by (api)(rate(backend_time_summary_sum{api=~\".*\", operation=~\".*\"}[60s] ))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MS Latency - Success Response Latency By API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice Latency Dashboard Automation\r",
									" * @author VikumSugathadasa on 24-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Microservice Latency Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Latency Dashboard data with all OEM APIs for Success Response Latency By API graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Traffic Dashboard data with Location API\", function () {\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Find the \"location\" API result\r",
									"        var locationOperationResult = resultArray.find(function (result) {\r",
									"            return result.metric.api === \"location\";\r",
									"        });\r",
									"\r",
									"        // Extract the second value of the \"location\" API result\r",
									"        var secondValue = parseFloat(locationOperationResult.value[1]);\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the location operation should be greater than or equal to 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Traffic Dashboard data with Payment API\", function () {\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Find the \"payment\" Operation result\r",
									"        var paymentOperationApiResult = resultArray.find(function (result) {\r",
									"            return result.metric.api === \"payment\";\r",
									"        });\r",
									"\r",
									"        // Extract the second value of the \"payment\" Operation result\r",
									"        var secondValue = parseFloat(paymentOperationApiResult.value[1]);\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the payment operation should be greater than or equal to 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Traffic Dashboard data with SMS API\", function () {\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Find the \"smsmessaging\" Operation result\r",
									"        var smsOperationResult = resultArray.find(function (result) {\r",
									"            return result.metric.api === \"smsmessaging\";\r",
									"        });\r",
									"\r",
									"        // Extract the second value of the \"smsmessaging\" Operation result\r",
									"        var secondValue = parseFloat(smsOperationResult.value[1]);\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the smsmessaging API should be greater than or equal to 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Traffic Dashboard data with USSD Operation\", function () {\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Find the \"ussd\" Operation result\r",
									"        var ussdOperationResult = resultArray.find(function (result) {\r",
									"            return result.metric.api === \"ussd\";\r",
									"        });\r",
									"\r",
									"        // Extract the second value of the \"ussd\" Operation result\r",
									"        var secondValue = parseFloat(ussdOperationResult.value[1]);\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value of the ussd operation should be greater than or equal to 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum by (api)(rate(response_time_summary_sum{api=~\".*\", operation=~\".*\"}[1m]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum by (api)(rate(response_time_summary_sum{api=~\".*\", operation=~\".*\"}[1m]))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MS Latency - Fail Latency By API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice Latency Dashboard Automation\r",
									" * @author VikumSugathadasa on 24-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Microservice Latency Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Latency dashboard data for Fail Latency By API graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum by (api)(rate(failed_summary_sum{api=~\".*\", operation=~\".*\"}[1m]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum by (api)(rate(failed_summary_sum{api=~\".*\", operation=~\".*\"}[1m]))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MS Latency - Latency vs Success Request Average",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice Latency Dashboard Automation\r",
									" * @author VikumSugathadasa on 24-05-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Microservice Latency Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Latency dashboard data for Latency vs Success Request Average graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=avg(sum(rate(request_time_summary_sum{api=~\".*\", operation=~\".*\"}[1w])))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "avg(sum(rate(request_time_summary_sum{api=~\".*\", operation=~\".*\"}[1w])))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MS Latency - Latency vs Success Backend Average",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice Latency Dashboard Automation\r",
									" * @author VikumSugathadasa on 24-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Microservice Latency Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Latency dashboard data for Latency vs Success Backend Average graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=avg(sum(rate(backend_time_summary_sum{api=~\".*\", operation=~\".*\"}[1w])))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "avg(sum(rate(backend_time_summary_sum{api=~\".*\", operation=~\".*\"}[1w])))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MS Latency - Latency vs Success Response Average",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice Latency Dashboard Automation\r",
									" * @author VikumSugathadasa on 24-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Microservice Latency Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Latency dashboard data for Latency vs Success Response Average graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=avg (sum(rate(response_time_summary_sum{api=~\".*\", operation=~\".*\"}[1w])))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "avg (sum(rate(response_time_summary_sum{api=~\".*\", operation=~\".*\"}[1w])))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MS Latency - Latency vs Success Response Average Updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * Microservice Latency Dashboard Automation\r",
									" * @author VikumSugathadasa on 24-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Microservice Lantency Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Lantency dashboard data for Latency vs Success Response Average graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=avg (sum(rate(response_time_summary_sum{api=~\".*\", operation=~\".*\"}[1w])))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "avg (sum(rate(response_time_summary_sum{api=~\".*\", operation=~\".*\"}[1w])))"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AXP TPM Dashboard",
			"item": [
				{
					"name": "AXP TPM - Gateway Traffic By Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP TPM Dashboard Automation\r",
									" * @author VikumSugathadasa on 25-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP TPM Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate AXP TPM Dashboard data By Apps\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"        console.log(secondValue)\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum by (application_name)(increase( axp_gw_request_total{application_name=~\".*\",api_name=~\".*\"}[60s]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum by (application_name)(increase( axp_gw_request_total{application_name=~\".*\",api_name=~\".*\"}[60s]))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP TPM - Gateway Traffic By API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP TPM Dashboard Automation\r",
									" * @author VikumSugathadasa on 25-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP TPM Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate AXP TPM dashboard data By API graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum by (api_name)(increase( axp_gw_request_total{application_name=~\".*\",api_name=~\".*\"}[60s]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum by (api_name)(increase( axp_gw_request_total{application_name=~\".*\",api_name=~\".*\"}[60s]))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP TPM - Gateway Error Traffic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP TPM Dashboard Automation\r",
									" * @author VikumSugathadasa on 25-05-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP TPM Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate AXP TPM Dashboard data with Error Traffic graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"        console.log(\"The value is: \" + secondValue);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(increase(axp_gw_failed_total{application_name=~\".*\",api_name!=\"unknown\", api_name=~\".*\"}[60s]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(increase(axp_gw_failed_total{application_name=~\".*\",api_name!=\"unknown\", api_name=~\".*\"}[60s]))"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AXP Nginx Ingress Controller Dashboard",
			"item": [
				{
					"name": "AXP Nginx - Controller Request Volume",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP Nginx Ingress Controller Dashboard Automation\r",
									" * @author VikumSugathadasa on 25-05-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP Nginx Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate AXP Nginx dashboard data for 'Controller Request Volume' graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=round(sum(irate(nginx_ingress_controller_requests{controller_pod=~\".*\",controller_class=~\".*\",namespace=~\".*\"}[2m])), 0.001)",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "round(sum(irate(nginx_ingress_controller_requests{controller_pod=~\".*\",controller_class=~\".*\",namespace=~\".*\"}[2m])), 0.001)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP Nginx - Controller Connections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP Nginx Ingress Controller Dashboard Automation\r",
									" * @author VikumSugathadasa on 25-05-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP Nginx Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate AXP Nginx dashboard data for Controller Connections graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(avg_over_time(nginx_ingress_controller_nginx_process_connections{controller_pod=~\".*\",controller_class=~\".*\",controller_namespace=~\".*\"}[2m]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(avg_over_time(nginx_ingress_controller_nginx_process_connections{controller_pod=~\".*\",controller_class=~\".*\",controller_namespace=~\".*\"}[2m]))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP Nginx - Controller Success Rate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP Nginx Ingress Controller Dashboard Automation\r",
									" * @author VikumSugathadasa on 25-05-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP Nginx Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate AXP Nginx dashboard data for Controller Success Rate graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(rate(nginx_ingress_controller_requests{controller_pod=~\".*\",controller_class=~\".*\",namespace=~\".*\",status!~\"[4-5].*\"}[2m])) / sum(rate(nginx_ingress_controller_requests{controller_pod=~\".*\",controller_class=~\".*\",namespace=~\".*\"}[2m]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(rate(nginx_ingress_controller_requests{controller_pod=~\".*\",controller_class=~\".*\",namespace=~\".*\",status!~\"[4-5].*\"}[2m])) / sum(rate(nginx_ingress_controller_requests{controller_pod=~\".*\",controller_class=~\".*\",namespace=~\".*\"}[2m]))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP Nginx - Config Reloads",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP Nginx Ingress Controller Dashboard Automation\r",
									" * @author VikumSugathadasa on 25-05-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP Nginx Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate AXP Nginx dashboard data for Config Reloads graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=avg(nginx_ingress_controller_success{controller_pod=~\".*\",controller_class=~\".*\",controller_namespace=~\".*\"})",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "avg(nginx_ingress_controller_success{controller_pod=~\".*\",controller_class=~\".*\",controller_namespace=~\".*\"})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP Nginx - Ingress Request Volume",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP Nginx Ingress Controller Dashboard Automation\r",
									" * @author VikumSugathadasa on 25-05-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP Nginx Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate AXP Nginx dashboard data for Ingress Request Volume graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=round(sum(irate(nginx_ingress_controller_requests{controller_pod=~\".*\",controller_class=~\".*\",controller_namespace=~\".*\",ingress=~\".*\"}[2m])) by (ingress), 0.001)",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "round(sum(irate(nginx_ingress_controller_requests{controller_pod=~\".*\",controller_class=~\".*\",controller_namespace=~\".*\",ingress=~\".*\"}[2m])) by (ingress), 0.001)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP Nginx - Ingress Success Rate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP Nginx Ingress Controller Dashboard Automation\r",
									" * @author VikumSugathadasa on 25-05-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP Nginx Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate AXP Nginx dashboard data for Ingress Success Rate for axonect portal\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {  \r",
									"        // Find the 200 status code\r",
									"        var cpIngress = resultArray.find(function (result) {\r",
									"            return result.metric.ingress === \"axonect-monetiser-am-cp-ingress\";\r",
									"        });\r",
									"\r",
									"        if(typeof cpIngress === undefined){\r",
									"            console.log(\"axonect-monetiser-am-cp-ingress is not found in the response\")\r",
									"        }else{\r",
									"            // Extract the value array\r",
									"            var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"            // Extract the second value of the 200 status code\r",
									"            var secondValue = parseFloat(cpIngress.value[1]);\r",
									"            console.log(\"'cp ingress' value is: \" + secondValue);\r",
									"\r",
									"            if(valueArray[1] === \"NaN\" || secondValue === 0){\r",
									"                console.log(\"secondValue is either 0 or NaN\");\r",
									"            }else if(secondValue <= -1){\r",
									"                console.log(\"secondValue is -1\");\r",
									"                throw new Error(\"secondValue is (-) value\");\r",
									"            }else{\r",
									"                console.log(\"The value is: \" + secondValue);\r",
									"            }\r",
									"        }\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0 or NaN\r",
									"        pm.expect(secondValue, \"The second value should be greater than or equal to 0 or NaN\").to.satisfy(function (value) {\r",
									"            return value >= 0 || isNaN(value);\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate AXP Nginx dashboard data for Ingress Success Rate for axonect gateway\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {  \r",
									"        // Find the 200 status code\r",
									"        var gatewayIngress = resultArray.find(function (result) {\r",
									"            return result.metric.ingress === \"axonect-monetiser-am-gateway-ingress\";\r",
									"        });\r",
									"\r",
									"        if(typeof gatewayIngress === undefined){\r",
									"            console.log(\"axonect-monetiser-am-gateway-ingress is not found in the response\")\r",
									"        }else{\r",
									"            // Extract the value array\r",
									"            var valueArray = pm.response.json().data.result[1].value;\r",
									"\r",
									"            // Extract the second value of the 200 status code\r",
									"            var secondValue = parseFloat(gatewayIngress.value[1]);\r",
									"            console.log(\"'gateway ingress' value is: \" + secondValue);\r",
									"\r",
									"            if(valueArray[1] === \"NaN\" || secondValue === 0){\r",
									"                console.log(\"secondValue is either 0 or NaN\");\r",
									"            }else if(secondValue <= -1){\r",
									"                console.log(\"secondValue is -1\");\r",
									"                throw new Error(\"secondValue is (-) value\");\r",
									"            }else{\r",
									"                console.log(\"The value is: \" + secondValue);\r",
									"            }\r",
									"        }\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0 or NaN\r",
									"        pm.expect(secondValue, \"The second value should be greater than or equal to 0 or NaN\").to.satisfy(function (value) {\r",
									"            return value >= 0 || isNaN(value);\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate AXP Nginx dashboard data for Ingress Success Rate for grafana\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {  \r",
									"        // Find the 200 status code\r",
									"        var grafanaIngress = resultArray.find(function (result) {\r",
									"            return result.metric.ingress === \"axonect-monetiser-grafana\";\r",
									"        });\r",
									"\r",
									"        if(typeof grafanaIngress === undefined){\r",
									"            console.log(\"axonect-monetiser-grafana is not found in the response\")\r",
									"        }else{\r",
									"            // Extract the value array\r",
									"            var valueArray = pm.response.json().data.result[2].value;\r",
									"\r",
									"            // Extract the second value of the 200 status code\r",
									"            var secondValue = parseFloat(grafanaIngress.value[1]);\r",
									"            console.log(\"'grafana ingress' value is: \" + secondValue);\r",
									"\r",
									"            if(valueArray[1] === \"NaN\" || secondValue === 0){\r",
									"                console.log(\"secondValue is either 0 or NaN\");\r",
									"            }else if(secondValue <= -1){\r",
									"                console.log(\"secondValue is -1\");\r",
									"                throw new Error(\"secondValue is (-) value\");\r",
									"            }else{\r",
									"                console.log(\"The value is: \" + secondValue);\r",
									"            }\r",
									"        }\r",
									"\r",
									"        // Check if the second value is greater than or equal to 0 or NaN\r",
									"        pm.expect(secondValue, \"The second value should be greater than or equal to 0 or NaN\").to.satisfy(function (value) {\r",
									"            return value >= 0 || isNaN(value);\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(rate(nginx_ingress_controller_requests{controller_pod=~\".*\",controller_class=~\".*\",namespace=~\".*\",ingress=~\".*\",status!~\"[4-5].*\"}[2m])) by (ingress) / sum(rate(nginx_ingress_controller_requests{controller_pod=~\".*\",controller_class=~\".*\",namespace=~\".*\",ingress=~\".*\"}[2m])) by (ingress)",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(rate(nginx_ingress_controller_requests{controller_pod=~\".*\",controller_class=~\".*\",namespace=~\".*\",ingress=~\".*\",status!~\"[4-5].*\"}[2m])) by (ingress) / sum(rate(nginx_ingress_controller_requests{controller_pod=~\".*\",controller_class=~\".*\",namespace=~\".*\",ingress=~\".*\"}[2m])) by (ingress)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP Nginx - Network I/O pressure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP Nginx Ingress Controller Dashboard Automation\r",
									" * @author VikumSugathadasa on 25-05-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP Nginx Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate AXP Nginx dashboard data for Network I/O Pressure graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum (irate (nginx_ingress_controller_request_size_sum{controller_pod=~\".*\",controller_class=~\".*\",controller_namespace=~\".*\"}[2m]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum (irate (nginx_ingress_controller_request_size_sum{controller_pod=~\".*\",controller_class=~\".*\",controller_namespace=~\".*\"}[2m]))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP Nginx - Average Memory Usage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP Nginx Ingress Controller Dashboard Automation\r",
									" * @author VikumSugathadasa on 25-05-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP Nginx Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate AXP Nginx dashboard data for Average Memory Usage graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=avg(nginx_ingress_controller_nginx_process_resident_memory_bytes{controller_pod=~\".*\",controller_class=~\".*\",controller_namespace=~\".*\"}) ",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "avg(nginx_ingress_controller_nginx_process_resident_memory_bytes{controller_pod=~\".*\",controller_class=~\".*\",controller_namespace=~\".*\"}) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP Nginx - Average CPU Usage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP Nginx Ingress Controller Dashboard Automation\r",
									" * @author VikumSugathadasa on 25-05-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP Nginx Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate AXP Nginx dashboard data for Average CPU Usage graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum (rate (nginx_ingress_controller_nginx_process_cpu_seconds_total{controller_pod=~\".*\",controller_class=~\".*\",controller_namespace=~\".*\"}[2m])) ",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum (rate (nginx_ingress_controller_nginx_process_cpu_seconds_total{controller_pod=~\".*\",controller_class=~\".*\",controller_namespace=~\".*\"}[2m])) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AXP Performance Dashboard",
			"item": [
				{
					"name": "AXP Performance - Disk Vs CPU Line Chart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP Performance Dashboard Automation\r",
									" * @author VikumSugathadasa on 26-05-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Performance Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate Performance dashboard data for Disk Vs CPU Line Chart graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=Sum(rate(container_fs_usage_bytes{kubernetes_io_hostname=~\".*\"}[60s]))/1024/1024/1024",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "Sum(rate(container_fs_usage_bytes{kubernetes_io_hostname=~\".*\"}[60s]))/1024/1024/1024"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP Performance - Disk Vs CPU Pie Chart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP Performance Dashboard Automation\r",
									" * @author VikumSugathadasa on 26-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the Performance Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Performance Dashboard data for Disk Vs CPU Pie Chart\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum (rate (container_cpu_usage_seconds_total{kubernetes_io_hostname=~\".*\"}[60s])) / sum (machine_cpu_cores) * 100",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum (rate (container_cpu_usage_seconds_total{kubernetes_io_hostname=~\".*\"}[60s])) / sum (machine_cpu_cores) * 100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP Performance - Latency Vs CPU Pie Chart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP Performance Dashboard Automation\r",
									" * @author VikumSugathadasa on 26-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP Performance Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate AXP Performance dashboard data for Latency Vs CPU Pie Chart\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum (rate (container_cpu_usage_seconds_total{kubernetes_io_hostname=~\".*\"}[1m])) / sum (machine_cpu_cores) * 100",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum (rate (container_cpu_usage_seconds_total{kubernetes_io_hostname=~\".*\"}[1m])) / sum (machine_cpu_cores) * 100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP Performance - Traffic Vs Memory Pie Chart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP Performance Dashboard Automation\r",
									" * @author VikumSugathadasa on 26-05-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP Performance Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate AXP Performance dashboard data for Traffic Vs Memory Pie Chart\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum( container_memory_working_set_bytes{ kubernetes_io_hostname=~\".*\"})/sum( machine_memory_bytes{ kubernetes_io_hostname=~\".*\"})",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum( container_memory_working_set_bytes{ kubernetes_io_hostname=~\".*\"})/sum( machine_memory_bytes{ kubernetes_io_hostname=~\".*\"})"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AXP Saturation Dashboard",
			"item": [
				{
					"name": "AXP Saturation - Cluster CPU Usage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP Sturation Dashboard Automation\r",
									" * @author VikumSugathadasa on 26-05-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP Saturation Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate AXP Saturation dashboard data for Cluster CPU Usage graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum (rate (container_cpu_usage_seconds_total{id=\"/\",kubernetes_io_hostname=~\".*\"}[1m])) / sum (machine_cpu_cores{kubernetes_io_hostname=~\".*\"}) * 100",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum (rate (container_cpu_usage_seconds_total{id=\"/\",kubernetes_io_hostname=~\".*\"}[1m])) / sum (machine_cpu_cores{kubernetes_io_hostname=~\".*\"}) * 100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP Saturation - Cluster Filesystem Usage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP Sturation Dashboard Automation\r",
									" * @author VikumSugathadasa on 26-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP Saturation Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate AXP Saturation Dashboard data for Cluster FileSystem Usage graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum (container_fs_usage_bytes{id=\"/\",kubernetes_io_hostname=~\".*\"}) / sum (container_fs_limit_bytes{id=\"/\",kubernetes_io_hostname=~\".*\"}) * 100",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum (container_fs_usage_bytes{id=\"/\",kubernetes_io_hostname=~\".*\"}) / sum (container_fs_limit_bytes{id=\"/\",kubernetes_io_hostname=~\".*\"}) * 100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP Saturation - Cluster Memory Usage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP Sturation Dashboard Automation\r",
									" * @author VikumSugathadasa on 26-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP Saturation Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate AXP Saturation dashboard data for Cluste Memory Usage graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(container_memory_working_set_bytes{id=\"/\",kubernetes_io_hostname=~\".*\"}) / sum (machine_memory_bytes{kubernetes_io_hostname=~\".*\"}) * 100",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(container_memory_working_set_bytes{id=\"/\",kubernetes_io_hostname=~\".*\"}) / sum (machine_memory_bytes{kubernetes_io_hostname=~\".*\"}) * 100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP Saturation - Pod Total CPU Vs Used CPU",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP Sturation Dashboard Automation\r",
									" * @author VikumSugathadasa on 26-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP Saturation Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate AXP Saturation Dashboard data for Pod Total CPU Vs Used CPU graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(rate(container_cpu_usage_seconds_total{id=\"/\",kubernetes_io_hostname=~\".*\"}[1m]))/sum(machine_cpu_cores{kubernetes_io_hostname=~\".*\"})*100",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(rate(container_cpu_usage_seconds_total{id=\"/\",kubernetes_io_hostname=~\".*\"}[1m]))/sum(machine_cpu_cores{kubernetes_io_hostname=~\".*\"})*100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP Saturation - Pod Total Mem Vs Used Mem",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP Sturation Dashboard Automation\r",
									" * @author VikumSugathadasa on 26-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP Saturation Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate AXP Saturation dashboard data for Pod Total Mem Vs Used Memory graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum (container_memory_working_set_bytes{id=\"/\",kubernetes_io_hostname=~\".*\"}) / sum (machine_memory_bytes{kubernetes_io_hostname=~\".*\"}) * 100",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum (container_memory_working_set_bytes{id=\"/\",kubernetes_io_hostname=~\".*\"}) / sum (machine_memory_bytes{kubernetes_io_hostname=~\".*\"}) * 100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP Saturation - Container Count By Namespace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP Sturation Dashboard Automation\r",
									" * @author VikumSugathadasa on 26-05-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP Saturation Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate AXP Saturation dashboard data for Container Count By Namespace graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=count by (namespace) (kube_pod_container_info)",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "count by (namespace) (kube_pod_container_info)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP Saturation - Container Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP Sturation Dashboard Automation\r",
									" * @author VikumSugathadasa on 26-05-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP Saturation Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate AXP Saturation dashboard data for Container Count graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=count by (container) (kube_pod_container_info)",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "count by (container) (kube_pod_container_info)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP Saturation - Node Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP Sturation Dashboard Automation\r",
									" * @author VikumSugathadasa on 26-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP Saturation Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate AXP Saturation dashboard data for Node Count graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=count(node_uname_info)",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "count(node_uname_info)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP Saturation - Nodes Memory pressure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP Sturation Dashboard Automation\r",
									" * @author VikumSugathadasa on 26-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP Saturation Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate AXP Saturation dashboard data for Nodes Memory Pressure graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(kube_node_status_condition{condition=\"MemoryPressure\", node=~\".*\", status=\"true\"})",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(kube_node_status_condition{condition=\"MemoryPressure\", node=~\".*\", status=\"true\"})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP Saturation - Nodes Diskpressure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP Sturation Dashboard Automation\r",
									" * @author VikumSugathadasa on 26-05-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP Saturation Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate AXP Saturation dashboard data for Nodes Diskpressure graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(kube_node_status_condition{condition=\"DiskPressure\", node=~\".*\", status=\"true\"})",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(kube_node_status_condition{condition=\"DiskPressure\", node=~\".*\", status=\"true\"})"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AXP System Node Dashboard",
			"item": [
				{
					"name": "AXP System Node - Node-Disk",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP System Node Dashboard Automation\r",
									" * @author VikumSugathadasa on 06-06-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP System Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate Microservice Latency dashboard data for Node Disk graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum (container_memory_working_set_bytes{id=\"/\",kubernetes_io_hostname=~\".*\"})",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum (container_memory_working_set_bytes{id=\"/\",kubernetes_io_hostname=~\".*\"})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP System Node - Node-CPU",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP System Node Dashboard Automation\r",
									" * @author VikumSugathadasa on 06-06-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP System Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Microservice Latency Dashboard data Node CPU graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum (container_memory_working_set_bytes{id=\"/\",kubernetes_io_hostname=~\".*\"}) / sum (machine_memory_bytes{kubernetes_io_hostname=~\".*\"}) * 100",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum (container_memory_working_set_bytes{id=\"/\",kubernetes_io_hostname=~\".*\"}) / sum (machine_memory_bytes{kubernetes_io_hostname=~\".*\"}) * 100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP System Node - Node Memory Usage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP System Node Dashboard Automation\r",
									" * @author VikumSugathadasa on 06-06-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP System Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate AXP System dashboard data for Node Memory Usage graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = responseJSON.data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(container_memory_working_set_bytes{id=\"/\",kubernetes_io_hostname=~\".*\"}) / sum (machine_memory_bytes{kubernetes_io_hostname=~\".*\"}) * 100",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(container_memory_working_set_bytes{id=\"/\",kubernetes_io_hostname=~\".*\"}) / sum (machine_memory_bytes{kubernetes_io_hostname=~\".*\"}) * 100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP System Node - Current Rate of Bytes Received",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP System Node Dashboard Automation\r",
									" * @author VikumSugathadasa on 06-06-2023\r",
									" */\r",
									"\r",
									"// Retrieve the responseJSON value from the environment\r",
									"const responseJSON = JSON.parse(pm.environment.get('responseJSON'));\r",
									"var resultArray = responseJSON.data.result;\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP System Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate AXP System Dashboard data for 'Current Rate Of Bytes Received' graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sort_desc(sum by (kubernetes_io_hostname)(irate(container_network_receive_bytes_total{kubernetes_io_hostname=~\".*\"}[1m]))) ",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sort_desc(sum by (kubernetes_io_hostname)(irate(container_network_receive_bytes_total{kubernetes_io_hostname=~\".*\"}[1m]))) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP System Node - Free memory usage-avg-1week",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP System Node Dashboard Automation\r",
									" * @author VikumSugathadasa on 06-06-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP System Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate AXP System dashboard data for 'Free Memory Usage-avg 1week' graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum (avg_over_time (container_memory_working_set_bytes{id=\"/\",kubernetes_io_hostname=~\".*\"}[1w]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum (avg_over_time (container_memory_working_set_bytes{id=\"/\",kubernetes_io_hostname=~\".*\"}[1w]))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP System Node - Network I/O pressure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP System Node Dashboard Automation\r",
									" * @author VikumSugathadasa on 06-06-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP System Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate AXP System dashboard data for Network I/O Pressure graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum (rate (container_network_receive_bytes_total{kubernetes_io_hostname=~\".*\"}[1m]))",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum (rate (container_network_receive_bytes_total{kubernetes_io_hostname=~\".*\"}[1m]))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP System Node - Node disk byte",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP System Node Dashboard Automation\r",
									" * @author VikumSugathadasa on 06-06-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP System Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate AXP System dashboard data for Node Disk Byte graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(node_disk_read_bytes_total)/10000",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(node_disk_read_bytes_total)/10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AXP System Node - Disk-io",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** \r",
									" * AXP System Node Dashboard Automation\r",
									" * @author VikumSugathadasa on 06-06-2023\r",
									" */\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseJSON = pm.response.json();\r",
									"\r",
									"// Update the environment variable with the new value\r",
									"pm.environment.set('responseJSON', JSON.stringify(responseJSON));\r",
									"\r",
									"pm.test(\"Validate Prometheus is sending data to the AXP System Dashboard\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // \"result\" array is not empty\r",
									"        console.log(\"The result array is not empty\");\r",
									"        pm.expect(responseJSON.data.result.length).to.be.above(0); // If Pass the test\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validate AXP System dashboard data for Disk IO graph\", function () {\r",
									"\r",
									"    // Check if the \"result\" array is empty\r",
									"    if (responseJSON.data.result.length === 0) {\r",
									"        // \"result\" array is empty\r",
									"        console.log(\"The result array is empty\");\r",
									"        throw new Error(\"The result array is empty\"); // If Fail the test\r",
									"    } else {\r",
									"        // Extract the value array\r",
									"        var valueArray = pm.response.json().data.result[0].value;\r",
									"\r",
									"        // Convert the second value to a float\r",
									"        var secondValue = parseFloat(valueArray[1]);\r",
									"\r",
									"        // Check if the second value is not equal to 0 or a negative value\r",
									"        pm.expect(secondValue).to.be.greaterThanOrEqual(0, \"The second value should be greater than 0\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{pro_env}}/api/v1/query?query=sum(node_disk_io_time_seconds_total)",
							"protocol": "https",
							"host": [
								"{{pro_env}}"
							],
							"path": [
								"api",
								"v1",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "sum(node_disk_io_time_seconds_total)"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}